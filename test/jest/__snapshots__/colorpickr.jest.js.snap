// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Colorpickr basic renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="1"
>
  <div
    className="z1 w-full h180 pr12 mb12 relative"
    key="2"
  >
    <RGBGradient
      active={false}
      color="r"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <RGBGradient
      active={false}
      color="g"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <RGBGradient
      active={false}
      color="b"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <HGradient
      active={true}
      hueBackground="#002fff"
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightLeft": "gradient-light-left",
        }
      }
    />
    <SVGradient
      active={false}
      color="s"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightBottom": "gradient-light-bottom",
          "gradientSHigh": "gradient-s-high",
          "gradientSLow": "gradient-s-low",
          "gradientVHigh": "gradient-v-high",
          "gradientVLow": "gradient-v-low",
        }
      }
    />
    <SVGradient
      active={false}
      color="v"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightBottom": "gradient-light-bottom",
          "gradientSHigh": "gradient-s-high",
          "gradientSLow": "gradient-s-low",
          "gradientVHigh": "gradient-v-high",
          "gradientVLow": "gradient-v-low",
        }
      }
    />
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control cursor-move",
          "xyControlContainer": "xy-control-container",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={74}
      xmax={100}
      y={2}
      ymax={100}
    />
    <div
      className="colormode-slider colormode-slider-h"
      key="3"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={229}
      />
    </div>
  </div>
  <div
    className="grid grid--gut12"
    key="4"
  >
    <div
      className="col col--5"
      key="5"
    >
      <div
        className="grid mb12"
        key="6"
      >
        <button
          className="col col--6 btn btn--gray-light h24 py0 round-l is-active"
          data-test="button-mode-rgb"
          key="7"
          onClick={[Function]}
          value="rgb"
        >
          RGB
        </button>
        <button
          className="col col--6 btn btn--gray-light h24 py0 round-r"
          data-test="button-mode-hsv"
          key="8"
          onClick={[Function]}
          value="hsv"
        >
          HSV
        </button>
      </div>
      <div>
        <div
          className="mt3 flex-parent"
          key="9"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="R"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={66}
          />
        </div>
        <div
          className="mt3 flex-parent"
          key="10"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="G"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mt3 flex-parent"
          key="11"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="B"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={251}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--7"
      key="15"
    >
      <div
        className="grid h24 mb12"
        key="16"
      >
        <div
          className="bg-tile col col--6 round-l clip border-r border--gray-faint"
          key="17"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="18"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "#4264fb",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile col col--6 round-r clip"
          key="19"
        >
          <div
            className="w-full h-full"
            key="20"
            style={
              Object {
                "backgroundColor": "rgba(66,100,251,1)",
              }
            }
          />
        </div>
      </div>
      <div
        className="relative mb12 pb3"
        key="21"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="22"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          key="23"
          onChange={[Function]}
          type="text"
          value="4264fb"
        />
      </div>
      <div
        className="bg-tile"
        key="24"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(66,100,251,0), rgba(66,100,251,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
      <div
        className="mt3"
        key="25"
      >
        <SVAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`Colorpickr rgbValue renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="1"
>
  <div
    className="z1 w-full h180 pr12 mb12 relative"
    key="2"
  >
    <RGBGradient
      active={false}
      color="r"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <RGBGradient
      active={false}
      color="g"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <RGBGradient
      active={false}
      color="b"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <HGradient
      active={true}
      hueBackground="#00ffff"
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightLeft": "gradient-light-left",
        }
      }
    />
    <SVGradient
      active={false}
      color="s"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightBottom": "gradient-light-bottom",
          "gradientSHigh": "gradient-s-high",
          "gradientSLow": "gradient-s-low",
          "gradientVHigh": "gradient-v-high",
          "gradientVLow": "gradient-v-low",
        }
      }
    />
    <SVGradient
      active={false}
      color="v"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightBottom": "gradient-light-bottom",
          "gradientSHigh": "gradient-s-high",
          "gradientSLow": "gradient-s-low",
          "gradientVHigh": "gradient-v-high",
          "gradientVLow": "gradient-v-low",
        }
      }
    />
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control cursor-move",
          "xyControlContainer": "xy-control-container",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={100}
      xmax={100}
      y={0}
      ymax={100}
    />
    <div
      className="colormode-slider colormode-slider-h"
      key="3"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={180}
      />
    </div>
  </div>
  <div
    className="grid grid--gut12"
    key="4"
  >
    <div
      className="col col--5"
      key="5"
    >
      <div
        className="grid mb12"
        key="6"
      >
        <button
          className="col col--6 btn btn--gray-light h24 py0 round-l is-active"
          data-test="button-mode-rgb"
          key="7"
          onClick={[Function]}
          value="rgb"
        >
          RGB
        </button>
        <button
          className="col col--6 btn btn--gray-light h24 py0 round-r"
          data-test="button-mode-hsv"
          key="8"
          onClick={[Function]}
          value="hsv"
        >
          HSV
        </button>
      </div>
      <div>
        <div
          className="mt3 flex-parent"
          key="9"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="R"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mt3 flex-parent"
          key="10"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="G"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={255}
          />
        </div>
        <div
          className="mt3 flex-parent"
          key="11"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="B"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={255}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--7"
      key="15"
    >
      <div
        className="grid h24 mb12"
        key="16"
      >
        <div
          className="bg-tile col col--6 round-l clip border-r border--gray-faint"
          key="17"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="18"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(0,255,255,0.5)",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile col col--6 round-r clip"
          key="19"
        >
          <div
            className="w-full h-full"
            key="20"
            style={
              Object {
                "backgroundColor": "rgba(0,255,255,0.5)",
              }
            }
          />
        </div>
      </div>
      <div
        className="relative mb12 pb3"
        key="21"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="22"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          key="23"
          onChange={[Function]}
          type="text"
          value="0ff"
        />
      </div>
      <div
        className="bg-tile"
        key="24"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,255,255,0), rgba(0,255,255,1))",
            }
          }
          type="range"
          value={50}
        />
      </div>
      <div
        className="mt3"
        key="25"
      >
        <SVAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={50}
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`Colorpickr rgbValue renders 2`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="1"
>
  <div
    className="z1 w-full h180 pr12 mb12 relative"
    key="2"
  >
    <RGBGradient
      active={false}
      color="r"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <RGBGradient
      active={false}
      color="g"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <RGBGradient
      active={false}
      color="b"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientBHigh": "gradient-rgb gradient-b-high",
          "gradientBLow": undefined,
          "gradientGHigh": "gradient-rgb gradient-g-high",
          "gradientGLow": "gradient-rgb gradient-g-low",
          "gradientRHigh": "gradient-rgb gradient-r-high",
          "gradientRLow": "gradient-rgb gradient-r-low",
        }
      }
    />
    <HGradient
      active={true}
      hueBackground="#00ffff"
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightLeft": "gradient-light-left",
        }
      }
    />
    <SVGradient
      active={false}
      color="s"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightBottom": "gradient-light-bottom",
          "gradientSHigh": "gradient-s-high",
          "gradientSLow": "gradient-s-low",
          "gradientVHigh": "gradient-v-high",
          "gradientVLow": "gradient-v-low",
        }
      }
    />
    <SVGradient
      active={false}
      color="v"
      opacityHigh={Object {}}
      opacityLow={Object {}}
      theme={
        Object {
          "gradient": "absolute top right bottom left",
          "gradientDarkBottom": "gradient-dark-bottom",
          "gradientLightBottom": "gradient-light-bottom",
          "gradientSHigh": "gradient-s-high",
          "gradientSLow": "gradient-s-low",
          "gradientVHigh": "gradient-v-high",
          "gradientVLow": "gradient-v-low",
        }
      }
    />
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control cursor-move",
          "xyControlContainer": "xy-control-container",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={100}
      xmax={100}
      y={0}
      ymax={100}
    />
    <div
      className="colormode-slider colormode-slider-h"
      key="3"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={180}
      />
    </div>
  </div>
  <div
    className="grid grid--gut12"
    key="4"
  >
    <div
      className="col col--5"
      key="5"
    >
      <div
        className="grid mb12"
        key="6"
      >
        <button
          className="col col--6 btn btn--gray-light h24 py0 round-l is-active"
          data-test="button-mode-rgb"
          key="7"
          onClick={[Function]}
          value="rgb"
        >
          RGB
        </button>
        <button
          className="col col--6 btn btn--gray-light h24 py0 round-r"
          data-test="button-mode-hsv"
          key="8"
          onClick={[Function]}
          value="hsv"
        >
          HSV
        </button>
      </div>
      <div>
        <div
          className="mt3 flex-parent"
          key="9"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="R"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mt3 flex-parent"
          key="10"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="G"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={255}
          />
        </div>
        <div
          className="mt3 flex-parent"
          key="11"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            label="B"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={255}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--7"
      key="15"
    >
      <div
        className="grid h24 mb12"
        key="16"
      >
        <div
          className="bg-tile col col--6 round-l clip border-r border--gray-faint"
          key="17"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="18"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "hsla(180, 100%, 50%, 0.5)",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile col col--6 round-r clip"
          key="19"
        >
          <div
            className="w-full h-full"
            key="20"
            style={
              Object {
                "backgroundColor": "rgba(0,255,255,0.5)",
              }
            }
          />
        </div>
      </div>
      <div
        className="relative mb12 pb3"
        key="21"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="22"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          key="23"
          onChange={[Function]}
          type="text"
          value="0ff"
        />
      </div>
      <div
        className="bg-tile"
        key="24"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,255,255,0), rgba(0,255,255,1))",
            }
          }
          type="range"
          value={50}
        />
      </div>
      <div
        className="mt3"
        key="25"
      >
        <SVAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={50}
        />
      </div>
    </div>
  </div>
</div>
`;
