// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Colorpickr all options renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="7"
>
  <div
    className="flex-parent relative"
    key="8"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="9"
    >
      <XYControl
        isDark="dark"
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={69}
        xmax={255}
        y={171}
        ymax={255}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0.29}
          opacityLow={0.71}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={true}
          color="g"
          opacityHigh={0.29}
          opacityLow={0.71}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0.29}
          opacityLow={0.71}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={false}
          hueBackground="hsl(18, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0.29}
          opacityLow={0.71}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0.29}
          opacityLow={0.71}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-g"
        key="10"
      >
        <input
          max={255}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={73}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="11"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(84,73,69,0), rgba(84,73,69,1))",
            }
          }
          type="range"
          value={25}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="12"
    >
      <div
        className="toggle-group w-full mb12"
        key="13"
      >
        <label
          className="toggle-container w-full"
          key="14"
        >
          <input
            checked={false}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="15"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="16"
        >
          <input
            checked={true}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="17"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent"
          key="4"
        >
          <ModeInput
            checked={false}
            id="r"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            id="r"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={84}
          />
        </div>
        <div
          className="mb3 flex-parent is-active"
          key="5"
        >
          <ModeInput
            checked={true}
            id="g"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            id="g"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={73}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="6"
        >
          <ModeInput
            checked={false}
            id="b"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <RGBInput
            id="b"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={69}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="18"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={25}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="19"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="20"
    >
      <div
        className="bg-tile bg-white col h24"
        key="21"
      >
        <div
          className="w-full h-full"
          key="22"
          style={
            Object {
              "backgroundColor": "rgba(84,73,69,0.25)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="23"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="24"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="25"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="544945"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr basic hex input adjusts value onBlur 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark=""
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={0}
        xmax={100}
        y={7}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(0, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={0}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(238,238,238,0), rgba(238,238,238,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={93}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#000",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(238,238,238,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="eeeeee"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr basic hex input returns value onChange 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark=""
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={0}
        xmax={100}
        y={7}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(0, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={0}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(238,238,238,0), rgba(238,238,238,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={93}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#000",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(238,238,238,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="eeef"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr basic invalid hex input does not fire onChange 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark="dark"
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={0}
        xmax={100}
        y={100}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(0, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={0}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#000",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(0,0,0,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="eeeff"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr basic renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark="dark"
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={0}
        xmax={100}
        y={100}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(0, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={0}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#000",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(0,0,0,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="000"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr hex value renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark=""
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={100}
        xmax={100}
        y={40}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(175, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={175}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(51,255,238,0), rgba(51,255,238,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={175}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={60}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#33ffee",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(51,255,238,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="33ffee"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr hsl value renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark=""
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={10}
        xmax={100}
        y={10}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(72, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={72}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(231,232,227,0), rgba(231,232,227,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={72}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={10}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={90}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "hsl(72, 10%, 90%)",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(231,232,227,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="e7e8e3"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr hsla value renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark="dark"
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={100}
        xmax={100}
        y={50}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(180, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={180}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,255,255,0), rgba(0,255,255,1))",
            }
          }
          type="range"
          value={50}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={180}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={50}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={50}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "hsla(180, 100%, 50%, 0.5)",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(0,255,255,0.5)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="00ffff"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr read only renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark="dark"
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer events-none",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={0}
        xmax={100}
        y={100}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(0, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          disabled={true}
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={0}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          disabled={true}
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            readOnly={true}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            readOnly={true}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            readOnly={true}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            readOnly={true}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            readOnly={true}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            readOnly={true}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={0}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          readOnly={true}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          disabled={true}
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#000",
            }
          }
          title="Reset color"
        />
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(0,0,0,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        readOnly={true}
        type="text"
        value="000"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr rgb value renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark="dark"
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={100}
        xmax={100}
        y={50}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(180, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={180}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(0,255,255,0), rgba(0,255,255,1))",
            }
          }
          type="range"
          value={50}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={180}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={50}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={50}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "rgba(0, 255, 255, 0.5)",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(0,255,255,0.5)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="00ffff"
      />
    </div>
  </div>
</div>
`;

exports[`Colorpickr show hex value renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="4"
>
  <div
    className="flex-parent relative"
    key="5"
  >
    <div
      className="flex-child flex-child--no-shrink pb12 h120 w120 z1"
      key="6"
    >
      <XYControl
        isDark=""
        onChange={[Function]}
        theme={
          Object {
            "xyControl": "xy-control absolute z1 unselectable cursor-move",
            "xyControlContainer": "relative w-full h-full cursor-pointer",
            "xyControlDark": "xy-control-dark",
          }
        }
        x={100}
        xmax={100}
        y={40}
        ymax={100}
      >
        <RGBGradient
          active={false}
          color="r"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="g"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <RGBGradient
          active={false}
          color="b"
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientBHigh": "gradient-rgb gradient-b-high",
              "gradientBLow": "gradient-rgb gradient-b-low",
              "gradientGHigh": "gradient-rgb gradient-g-high",
              "gradientGLow": "gradient-rgb gradient-g-low",
              "gradientRHigh": "gradient-rgb gradient-r-high",
              "gradientRLow": "gradient-rgb gradient-r-low",
            }
          }
        />
        <HGradient
          active={true}
          hueBackground="hsl(175, 100%, 50%)"
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientHue": "gradient-hue",
            }
          }
        />
        <SGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientSaturation": "gradient-saturation",
            }
          }
        />
        <LGradient
          active={false}
          opacityHigh={0}
          opacityLow={0}
          theme={
            Object {
              "gradient": "absolute top right bottom left",
              "gradientLight": "gradient-light",
            }
          }
        />
      </XYControl>
      <div
        className="slider colormode-slider colormode-slider-h"
        key="7"
      >
        <input
          max={360}
          min={0}
          onChange={[Function]}
          style={Object {}}
          type="range"
          value={175}
        />
      </div>
      <div
        className="slider bg-tile bg-white"
        key="8"
      >
        <input
          max={100}
          min={0}
          onChange={[Function]}
          style={
            Object {
              "background": "linear-gradient(to right, rgba(51,255,238,0), rgba(51,255,238,1))",
            }
          }
          type="range"
          value={100}
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12"
      key="9"
    >
      <div
        className="toggle-group w-full mb12"
        key="10"
      >
        <label
          className="toggle-container w-full"
          key="11"
        >
          <input
            checked={true}
            data-test="mode-hsl"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="hsl"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="12"
          >
            HSL
          </div>
        </label>
        <label
          className="toggle-container w-full"
          key="13"
        >
          <input
            checked={false}
            data-test="mode-rgb"
            name="toggle"
            onChange={[Function]}
            type="radio"
            value="rgb"
          />
          <div
            className="toggle py0 px6 toggle--gray"
            key="14"
          >
            RGB
          </div>
        </label>
      </div>
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="1"
        >
          <ModeInput
            checked={true}
            id="h"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            id="h"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={175}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="2"
        >
          <ModeInput
            checked={false}
            id="s"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="s"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="3"
        >
          <ModeInput
            checked={false}
            id="l"
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            id="l"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={60}
          />
        </div>
      </div>
      <div
        className="mb3"
        key="15"
      >
        <SLAlphaInput
          id="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
    </div>
  </div>
  <div
    className="flex-parent mt6"
    key="16"
  >
    <div
      className="flex-child flex-child--no-shrink grid w120 round scroll-hidden"
      key="17"
    >
      <div
        className="bg-tile bg-white col h24 border-r border--gray-faint"
        key="18"
      >
        <button
          className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
          data-test="color-reset"
          key="19"
          onClick={[Function]}
          style={
            Object {
              "backgroundColor": "#3fe",
            }
          }
          title="Reset color"
        >
          Reset
        </button>
      </div>
      <div
        className="bg-tile bg-white col h24"
        key="20"
      >
        <div
          className="w-full h-full"
          key="21"
          style={
            Object {
              "backgroundColor": "rgba(51,255,238,1)",
            }
          }
        />
      </div>
    </div>
    <div
      className="flex-child flex-child--grow ml12 relative"
      key="22"
    >
      <label
        className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
        key="23"
      >
        #
      </label>
      <input
        className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
        data-test="hex-input"
        key="24"
        onBlur={[Function]}
        onChange={[Function]}
        type="text"
        value="3fe"
      />
    </div>
  </div>
</div>
`;
