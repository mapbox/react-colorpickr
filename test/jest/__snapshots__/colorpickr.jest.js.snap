// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Colorpickr basic hex input adjusts value onBlur 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="318"
>
  <div
    className="z1 w-full h180 pr24 mb12 relative"
    key="319"
  >
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control absolute z1 unselectable cursor-move",
          "xyControlContainer": "relative w-full h-full cursor-pointer",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={96}
      xmax={100}
      y={38}
      ymax={100}
    >
      <RGBGradient
        active={false}
        color="r"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="g"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="b"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <HGradient
        active={true}
        hueBackground="#002fff"
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientHue": "gradient-hue",
          }
        }
      />
      <SGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientSaturation": "gradient-saturation",
          }
        }
      />
      <LGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientLight": "gradient-light",
          }
        }
      />
    </XYControl>
    <div
      className="slider colormode-slider colormode-slider-h"
      key="370"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={229}
      />
    </div>
    <div
      className="slider bg-tile bg-white"
      key="384"
    >
      <input
        max={100}
        min={0}
        onChange={[Function]}
        style={
          Object {
            "background": "linear-gradient(to right, rgba(66,100,251,0), rgba(66,100,251,1))",
          }
        }
        type="range"
        value={100}
      />
    </div>
  </div>
  <div
    className="toggle-group round-full border border--gray-light py3 px3 mb12 w-full"
    key="393"
  >
    <label
      className="toggle-container w-full"
      key="404"
    >
      <input
        checked={true}
        data-test="mode-hsl"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="hsl"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="412"
      >
        HSL
      </div>
    </label>
    <label
      className="toggle-container w-full"
      key="394"
    >
      <input
        checked={false}
        data-test="mode-rgb"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="rgb"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="402"
      >
        RGB
      </div>
    </label>
  </div>
  <div
    className="grid grid--gut12"
    key="424"
  >
    <div
      className="col col--6"
      key="425"
    >
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="497"
        >
          <ModeInput
            checked={true}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            label="H"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={229}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="521"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="S"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={96}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="545"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="L"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={62}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--6"
      key="569"
    >
      <div
        className="relative mb3"
        key="570"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="571"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          data-test="hex-input"
          key="573"
          onBlur={[Function]}
          onChange={[Function]}
          type="text"
          value="4264fb"
        />
      </div>
      <div
        className="mb3"
        key="579"
      >
        <SLAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
      <div
        className="grid h24"
        key="587"
      >
        <div
          className="bg-tile bg-white col col--6 round-l clip border-r border--gray-faint"
          key="589"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="591"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "#4264fb",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile bg-white col col--6 round-r clip"
          key="599"
        >
          <div
            className="w-full h-full"
            key="600"
            style={
              Object {
                "backgroundColor": "rgba(66,100,251,1)",
              }
            }
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Colorpickr basic hex input returns value onChange 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="318"
>
  <div
    className="z1 w-full h180 pr24 mb12 relative"
    key="319"
  >
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control absolute z1 unselectable cursor-move",
          "xyControlContainer": "relative w-full h-full cursor-pointer",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={96}
      xmax={100}
      y={38}
      ymax={100}
    >
      <RGBGradient
        active={false}
        color="r"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="g"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="b"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <HGradient
        active={true}
        hueBackground="#002fff"
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientHue": "gradient-hue",
          }
        }
      />
      <SGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientSaturation": "gradient-saturation",
          }
        }
      />
      <LGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientLight": "gradient-light",
          }
        }
      />
    </XYControl>
    <div
      className="slider colormode-slider colormode-slider-h"
      key="370"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={229}
      />
    </div>
    <div
      className="slider bg-tile bg-white"
      key="384"
    >
      <input
        max={100}
        min={0}
        onChange={[Function]}
        style={
          Object {
            "background": "linear-gradient(to right, rgba(66,100,251,0), rgba(66,100,251,1))",
          }
        }
        type="range"
        value={100}
      />
    </div>
  </div>
  <div
    className="toggle-group round-full border border--gray-light py3 px3 mb12 w-full"
    key="393"
  >
    <label
      className="toggle-container w-full"
      key="404"
    >
      <input
        checked={true}
        data-test="mode-hsl"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="hsl"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="412"
      >
        HSL
      </div>
    </label>
    <label
      className="toggle-container w-full"
      key="394"
    >
      <input
        checked={false}
        data-test="mode-rgb"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="rgb"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="402"
      >
        RGB
      </div>
    </label>
  </div>
  <div
    className="grid grid--gut12"
    key="424"
  >
    <div
      className="col col--6"
      key="425"
    >
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="497"
        >
          <ModeInput
            checked={true}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            label="H"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={229}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="521"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="S"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={96}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="545"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="L"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={62}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--6"
      key="569"
    >
      <div
        className="relative mb3"
        key="570"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="571"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          data-test="hex-input"
          key="573"
          onBlur={[Function]}
          onChange={[Function]}
          type="text"
          value="4264fb"
        />
      </div>
      <div
        className="mb3"
        key="579"
      >
        <SLAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
      <div
        className="grid h24"
        key="587"
      >
        <div
          className="bg-tile bg-white col col--6 round-l clip border-r border--gray-faint"
          key="589"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="591"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "#4264fb",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile bg-white col col--6 round-r clip"
          key="599"
        >
          <div
            className="w-full h-full"
            key="600"
            style={
              Object {
                "backgroundColor": "rgba(66,100,251,1)",
              }
            }
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Colorpickr basic renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="318"
>
  <div
    className="z1 w-full h180 pr24 mb12 relative"
    key="319"
  >
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control absolute z1 unselectable cursor-move",
          "xyControlContainer": "relative w-full h-full cursor-pointer",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={96}
      xmax={100}
      y={38}
      ymax={100}
    >
      <RGBGradient
        active={false}
        color="r"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="g"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="b"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <HGradient
        active={true}
        hueBackground="#002fff"
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientHue": "gradient-hue",
          }
        }
      />
      <SGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientSaturation": "gradient-saturation",
          }
        }
      />
      <LGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientLight": "gradient-light",
          }
        }
      />
    </XYControl>
    <div
      className="slider colormode-slider colormode-slider-h"
      key="370"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={229}
      />
    </div>
    <div
      className="slider bg-tile bg-white"
      key="384"
    >
      <input
        max={100}
        min={0}
        onChange={[Function]}
        style={
          Object {
            "background": "linear-gradient(to right, rgba(66,100,251,0), rgba(66,100,251,1))",
          }
        }
        type="range"
        value={100}
      />
    </div>
  </div>
  <div
    className="toggle-group round-full border border--gray-light py3 px3 mb12 w-full"
    key="393"
  >
    <label
      className="toggle-container w-full"
      key="404"
    >
      <input
        checked={true}
        data-test="mode-hsl"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="hsl"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="412"
      >
        HSL
      </div>
    </label>
    <label
      className="toggle-container w-full"
      key="394"
    >
      <input
        checked={false}
        data-test="mode-rgb"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="rgb"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="402"
      >
        RGB
      </div>
    </label>
  </div>
  <div
    className="grid grid--gut12"
    key="424"
  >
    <div
      className="col col--6"
      key="425"
    >
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="497"
        >
          <ModeInput
            checked={true}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            label="H"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={229}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="521"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="S"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={96}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="545"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="L"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={62}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--6"
      key="569"
    >
      <div
        className="relative mb3"
        key="570"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="571"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          data-test="hex-input"
          key="573"
          onBlur={[Function]}
          onChange={[Function]}
          type="text"
          value="4264fb"
        />
      </div>
      <div
        className="mb3"
        key="579"
      >
        <SLAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={100}
        />
      </div>
      <div
        className="grid h24"
        key="587"
      >
        <div
          className="bg-tile bg-white col col--6 round-l clip border-r border--gray-faint"
          key="589"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="591"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "#4264fb",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile bg-white col col--6 round-r clip"
          key="599"
        >
          <div
            className="w-full h-full"
            key="600"
            style={
              Object {
                "backgroundColor": "rgba(66,100,251,1)",
              }
            }
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Colorpickr rgbValue renders 1`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="318"
>
  <div
    className="z1 w-full h180 pr24 mb12 relative"
    key="319"
  >
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control absolute z1 unselectable cursor-move",
          "xyControlContainer": "relative w-full h-full cursor-pointer",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={100}
      xmax={100}
      y={50}
      ymax={100}
    >
      <RGBGradient
        active={false}
        color="r"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="g"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="b"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <HGradient
        active={true}
        hueBackground="#00ffff"
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientHue": "gradient-hue",
          }
        }
      />
      <SGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientSaturation": "gradient-saturation",
          }
        }
      />
      <LGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientLight": "gradient-light",
          }
        }
      />
    </XYControl>
    <div
      className="slider colormode-slider colormode-slider-h"
      key="370"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={180}
      />
    </div>
    <div
      className="slider bg-tile bg-white"
      key="384"
    >
      <input
        max={100}
        min={0}
        onChange={[Function]}
        style={
          Object {
            "background": "linear-gradient(to right, rgba(0,255,255,0), rgba(0,255,255,1))",
          }
        }
        type="range"
        value={50}
      />
    </div>
  </div>
  <div
    className="toggle-group round-full border border--gray-light py3 px3 mb12 w-full"
    key="393"
  >
    <label
      className="toggle-container w-full"
      key="404"
    >
      <input
        checked={true}
        data-test="mode-hsl"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="hsl"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="412"
      >
        HSL
      </div>
    </label>
    <label
      className="toggle-container w-full"
      key="394"
    >
      <input
        checked={false}
        data-test="mode-rgb"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="rgb"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="402"
      >
        RGB
      </div>
    </label>
  </div>
  <div
    className="grid grid--gut12"
    key="424"
  >
    <div
      className="col col--6"
      key="425"
    >
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="497"
        >
          <ModeInput
            checked={true}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            label="H"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={180}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="521"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="S"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="545"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="L"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={50}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--6"
      key="569"
    >
      <div
        className="relative mb3"
        key="570"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="571"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          data-test="hex-input"
          key="573"
          onBlur={[Function]}
          onChange={[Function]}
          type="text"
          value="0ff"
        />
      </div>
      <div
        className="mb3"
        key="579"
      >
        <SLAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={50}
        />
      </div>
      <div
        className="grid h24"
        key="587"
      >
        <div
          className="bg-tile bg-white col col--6 round-l clip border-r border--gray-faint"
          key="589"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="591"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "rgba(0,255,255,0.5)",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile bg-white col col--6 round-r clip"
          key="599"
        >
          <div
            className="w-full h-full"
            key="600"
            style={
              Object {
                "backgroundColor": "rgba(0,255,255,0.5)",
              }
            }
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Colorpickr rgbValue renders 2`] = `
<div
  className="colorpickr round inline-block bg-gray-faint w240 round px12 py12 txt-xs"
  key="318"
>
  <div
    className="z1 w-full h180 pr24 mb12 relative"
    key="319"
  >
    <XYControl
      isDark="dark"
      onChange={[Function]}
      theme={
        Object {
          "xyControl": "xy-control absolute z1 unselectable cursor-move",
          "xyControlContainer": "relative w-full h-full cursor-pointer",
          "xyControlDark": "xy-control-dark",
        }
      }
      x={100}
      xmax={100}
      y={50}
      ymax={100}
    >
      <RGBGradient
        active={false}
        color="r"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="g"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <RGBGradient
        active={false}
        color="b"
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientBHigh": "gradient-rgb gradient-b-high",
            "gradientBLow": "gradient-rgb gradient-b-low",
            "gradientGHigh": "gradient-rgb gradient-g-high",
            "gradientGLow": "gradient-rgb gradient-g-low",
            "gradientRHigh": "gradient-rgb gradient-r-high",
            "gradientRLow": "gradient-rgb gradient-r-low",
          }
        }
      />
      <HGradient
        active={true}
        hueBackground="#00ffff"
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientHue": "gradient-hue",
          }
        }
      />
      <SGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientSaturation": "gradient-saturation",
          }
        }
      />
      <LGradient
        active={false}
        opacityHigh={0}
        opacityLow={0}
        theme={
          Object {
            "gradient": "absolute top right bottom left",
            "gradientLight": "gradient-light",
          }
        }
      />
    </XYControl>
    <div
      className="slider colormode-slider colormode-slider-h"
      key="370"
    >
      <input
        max={359}
        min={0}
        onChange={[Function]}
        style={Object {}}
        type="range"
        value={180}
      />
    </div>
    <div
      className="slider bg-tile bg-white"
      key="384"
    >
      <input
        max={100}
        min={0}
        onChange={[Function]}
        style={
          Object {
            "background": "linear-gradient(to right, rgba(0,255,255,0), rgba(0,255,255,1))",
          }
        }
        type="range"
        value={50}
      />
    </div>
  </div>
  <div
    className="toggle-group round-full border border--gray-light py3 px3 mb12 w-full"
    key="393"
  >
    <label
      className="toggle-container w-full"
      key="404"
    >
      <input
        checked={true}
        data-test="mode-hsl"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="hsl"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="412"
      >
        HSL
      </div>
    </label>
    <label
      className="toggle-container w-full"
      key="394"
    >
      <input
        checked={false}
        data-test="mode-rgb"
        name="toggle"
        onChange={[Function]}
        type="radio"
        value="rgb"
      />
      <div
        className="toggle txt-xs py0 round-full toggle--gray"
        key="402"
      >
        RGB
      </div>
    </label>
  </div>
  <div
    className="grid grid--gut12"
    key="424"
  >
    <div
      className="col col--6"
      key="425"
    >
      <div>
        <div
          className="mb3 flex-parent is-active"
          key="497"
        >
          <ModeInput
            checked={true}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <HInput
            label="H"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={180}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="521"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="S"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={100}
          />
        </div>
        <div
          className="mb3 flex-parent"
          key="545"
        >
          <ModeInput
            checked={false}
            name=""
            onChange={[Function]}
            theme={
              Object {
                "modeInput": "cursor-pointer",
                "modeInputContainer": "flex-child flex-child--no-shrink flex-parent flex-parent--center-cross w24",
              }
            }
          />
          <SLAlphaInput
            label="L"
            onChange={[Function]}
            theme={
              Object {
                "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
                "numberInputContainer": "flex-child flex-child--grow relative",
                "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
              }
            }
            value={50}
          />
        </div>
      </div>
    </div>
    <div
      className="col col--6"
      key="569"
    >
      <div
        className="relative mb3"
        key="570"
      >
        <label
          className="absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold"
          key="571"
        >
          #
        </label>
        <input
          className="w-full pl18 pr3 input input--s txt-mono txt-xs bg-white"
          data-test="hex-input"
          key="573"
          onBlur={[Function]}
          onChange={[Function]}
          type="text"
          value="0ff"
        />
      </div>
      <div
        className="mb3"
        key="579"
      >
        <SLAlphaInput
          label="Î±"
          onChange={[Function]}
          theme={
            Object {
              "numberInput": "w-full pl18 pr3 input input--s txt-mono txt-xs bg-white",
              "numberInputContainer": "flex-child flex-child--grow relative",
              "numberInputLabel": "absolute top left bottom pl6 flex-parent flex-parent--center-cross color-gray-light txt-bold",
            }
          }
          value={50}
        />
      </div>
      <div
        className="grid h24"
        key="587"
      >
        <div
          className="bg-tile bg-white col col--6 round-l clip border-r border--gray-faint"
          key="589"
        >
          <button
            className="w-full h-full txt-bold align-center color-transparent color-white-on-hover transition"
            key="591"
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "hsla(180, 100%, 50%, 0.5)",
              }
            }
            title="Reset color"
          >
            Reset
          </button>
        </div>
        <div
          className="bg-tile bg-white col col--6 round-r clip"
          key="599"
        >
          <div
            className="w-full h-full"
            key="600"
            style={
              Object {
                "backgroundColor": "rgba(0,255,255,0.5)",
              }
            }
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
